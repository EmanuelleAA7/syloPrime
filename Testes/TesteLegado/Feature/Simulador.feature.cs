// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TesteLegado.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Simulador")]
    [NUnit.Framework.CategoryAttribute("Simulador")]
    public partial class SimuladorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Simulador.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Simulador", "\tEu como usuário\r\n\tDesejo utilizar o simulador para verificar os benefícios que s" +
                    "olução me proporcionaria", ProgrammingLanguage.CSharp, new string[] {
                        "Simulador"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("que entrei no site da sylo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("clico em menu >> simulação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Propriedade funcionando normalmente")]
        [NUnit.Framework.CategoryAttribute("Correto_Propriedade")]
        public virtual void PropriedadeFuncionandoNormalmente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Propriedade funcionando normalmente", null, new string[] {
                        "Correto_Propriedade"});
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 12
 testRunner.And("clico em propriedade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("preencho os campos requeridos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.And("clico em calcular propriedade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.Then("os resultados propriedade aparecem na tela", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Propriedade com campos nulos")]
        [NUnit.Framework.CategoryAttribute("Incorreto_Propriedade")]
        [NUnit.Framework.TestCaseAttribute("valor_saca_p_id", null)]
        [NUnit.Framework.TestCaseAttribute("qt_sacas_p_id", null)]
        [NUnit.Framework.TestCaseAttribute("desperdicio_porcentagem_id", null)]
        [NUnit.Framework.TestCaseAttribute("preco_mao_de_obra_p_id", null)]
        public virtual void PropriedadeComCamposNulos(string campo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Incorreto_Propriedade"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Propriedade com campos nulos", null, @__tags);
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 19
 testRunner.And("clico em propriedade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.When("preencho os campos requeridos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.But(string.Format("preencho o campo {0} com um valor nulo", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 22
 testRunner.And("clico em calcular propriedade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.Then("o sistema avisa que estão faltando dados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Terceiros funcionando normalmente")]
        [NUnit.Framework.CategoryAttribute("Correto_Terceiros")]
        public virtual void TerceirosFuncionandoNormalmente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Terceiros funcionando normalmente", null, new string[] {
                        "Correto_Terceiros"});
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 35
 testRunner.And("clico em através de terceiros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("preencho os campos dos terceiros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("clico em calcular terceiros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("os resultados terceiros aparecem na tela", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Terceiros com campos nulos")]
        [NUnit.Framework.CategoryAttribute("Incorreto_Terceiros")]
        [NUnit.Framework.TestCaseAttribute("qt_sacas_c_id", null)]
        [NUnit.Framework.TestCaseAttribute("preco_frete_id", null)]
        [NUnit.Framework.TestCaseAttribute("preco_mao_de_obra_c_id", null)]
        public virtual void TerceirosComCamposNulos(string campo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Incorreto_Terceiros"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Terceiros com campos nulos", null, @__tags);
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 43
 testRunner.And("clico em através de terceiros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("preencho os campos dos terceiros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.But(string.Format("preencho o campo {0} com um valor nulo", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 46
 testRunner.And("clico em calcular terceiros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.Then("o sistema avisa que estão faltando dados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
